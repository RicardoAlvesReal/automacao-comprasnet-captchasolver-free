#!/usr/bin/env python3
"""
üß† HEUR√çSTICA DE AN√ÅLISE - ANALISADOR INTELIGENTE
================================================
Sistema de decis√£o inteligente para an√°lise e classifica√ß√£o de CAPTCHAs
Decide COMO processar cada imagem para m√°xima efic√°cia
"""

import cv2
import numpy as np
import logging
from enum import Enum
from dataclasses import dataclass
from typing import Tuple, Dict, List, Optional
from pathlib import Path
import json
from datetime import datetime

def convert_numpy_types(obj):
    """Converte tipos numpy para tipos Python padr√£o para serializa√ß√£o JSON"""
    if isinstance(obj, np.integer):
        return int(obj)
    elif isinstance(obj, np.floating):
        return float(obj)
    elif isinstance(obj, np.ndarray):
        return obj.tolist()
    elif isinstance(obj, dict):
        return {key: convert_numpy_types(value) for key, value in obj.items()}
    elif isinstance(obj, list):
        return [convert_numpy_types(item) for item in obj]
    else:
        return obj

logger = logging.getLogger(__name__)

class TipoCaptcha(Enum):
    """Tipos de CAPTCHA identificados pelo analisador"""
    SIMPLES_LIMPO = "simples_limpo"           # Texto claro, fundo uniforme
    PADRAO_SOMBRAS = "padrao_sombras"         # Texto com sombras leves
    DISTORCAO_GEOMETRICA = "distorcao_geom"   # Texto distorcido/inclinado
    RUIDO_PESADO = "ruido_pesado"             # Muito ru√≠do/interfer√™ncia
    BAIXA_RESOLUCAO = "baixa_resolucao"       # Imagem pequena/borrada
    CASO_ESPECIAL = "caso_especial"           # Requer tratamento especial

class EstrategiaProcessamento(Enum):
    """Estrat√©gias de processamento identificadas"""
    THRESHOLD_SIMPLES = "threshold_simples"
    THRESHOLD_ADAPTATIVO = "threshold_adaptativo" 
    BINARIZACAO_TEXTO_PRETO = "binarizacao_texto_preto"  # NOVA: Espec√≠fica para texto preto
    MORFOLOGIA_AVANCADA = "morfologia_avancada"
    DENOISE_AGRESSIVO = "denoise_agressivo"
    SUPER_RESOLUTION = "super_resolution"
    SEGMENTACAO_WATERSHED = "segmentacao_watershed"
    PIPELINE_COMPLETO = "pipeline_completo"

@dataclass
class AnaliseCompleta:
    """Resultado completo da an√°lise heur√≠stica"""
    # Caracter√≠sticas da imagem
    tipo_captcha: TipoCaptcha
    score_complexidade: float
    caracteristicas: Dict[str, float]
    
    # Estrat√©gia recomendada
    estrategia_principal: EstrategiaProcessamento
    estrategias_alternativas: List[EstrategiaProcessamento]
    confianca_analise: float
    
    # Configura√ß√µes espec√≠ficas
    parametros_otimizados: Dict[str, any]
    threshold_recomendado: int
    
    # Metadados
    tempo_analise: float
    timestamp: str

class AnalisadorInteligente:
    """
    üß† HEUR√çSTICA 1: ANALISADOR INTELIGENTE
    
    Responsabilidades:
    - Classificar tipo de CAPTCHA
    - Calcular score de complexidade
    - Decidir estrat√©gia de processamento
    - Otimizar par√¢metros espec√≠ficos
    """
    
    def __init__(self):
        self.historico_analises = []
        self.estatisticas = {
            'total_analisados': 0,
            'tipos_encontrados': {},
            'estrategias_eficazes': {},
            'parametros_otimos': {}
        }
        
        # Carregar conhecimento pr√©vio se existir
        self.carregar_conhecimento_previo()
        
        logger.info("üß† Analisador Inteligente inicializado")
    
    def analisar_captcha(self, img: np.ndarray) -> AnaliseCompleta:
        """
        AN√ÅLISE PRINCIPAL: Determina o melhor approach para o CAPTCHA
        """
        inicio = datetime.now()
        logger.info("üîç Iniciando an√°lise heur√≠stica inteligente...")
        
        # 1. EXTRA√á√ÉO DE CARACTER√çSTICAS
        caracteristicas = self._extrair_caracteristicas(img)
        logger.info(f"üìä Caracter√≠sticas extra√≠das: {len(caracteristicas)} m√©tricas")
        
        # 2. CLASSIFICA√á√ÉO DO TIPO
        tipo_captcha = self._classificar_tipo(caracteristicas)
        logger.info(f"üè∑Ô∏è Tipo identificado: {tipo_captcha.value}")
        
        # 3. C√ÅLCULO DE COMPLEXIDADE
        score_complexidade = self._calcular_complexidade(caracteristicas)
        logger.info(f"üìà Score de complexidade: {score_complexidade:.2f}")
        
        # 4. SELE√á√ÉO DE ESTRAT√âGIA
        estrategia_principal, alternativas = self._selecionar_estrategia(
            tipo_captcha, score_complexidade, caracteristicas
        )
        logger.info(f"üéØ Estrat√©gia principal: {estrategia_principal.value}")
        
        # 5. OTIMIZA√á√ÉO DE PAR√ÇMETROS
        parametros = self._otimizar_parametros(
            tipo_captcha, estrategia_principal, caracteristicas
        )
        
        # 6. THRESHOLD RECOMENDADO
        threshold = self._calcular_threshold_otimo(caracteristicas, tipo_captcha)
        logger.info(f"üéØ Threshold otimizado: ‚â§{threshold}")
        
        # 7. CONFIAN√áA DA AN√ÅLISE
        confianca = self._calcular_confianca_analise(
            tipo_captcha, score_complexidade, caracteristicas
        )
        
        tempo_total = (datetime.now() - inicio).total_seconds()
        
        # Criar resultado completo
        analise = AnaliseCompleta(
            tipo_captcha=tipo_captcha,
            score_complexidade=score_complexidade,
            caracteristicas=caracteristicas,
            estrategia_principal=estrategia_principal,
            estrategias_alternativas=alternativas,
            confianca_analise=confianca,
            parametros_otimizados=parametros,
            threshold_recomendado=threshold,
            tempo_analise=tempo_total,
            timestamp=datetime.now().strftime("%Y%m%d_%H%M%S_%f")[:-3]
        )
        
        # Atualizar estat√≠sticas
        self._atualizar_estatisticas(analise)
        
        logger.info(f"‚úÖ An√°lise conclu√≠da em {tempo_total:.3f}s (confian√ßa: {confianca:.1%})")
        return analise
    
    def _extrair_caracteristicas(self, img: np.ndarray) -> Dict[str, float]:
        """Extrai caracter√≠sticas detalhadas da imagem"""
        if len(img.shape) == 3:
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        else:
            gray = img.copy()
        
        h, w = gray.shape
        total_pixels = h * w
        
        caracteristicas = {}
        
        # 1. CARACTER√çSTICAS B√ÅSICAS
        caracteristicas['altura'] = h
        caracteristicas['largura'] = w
        caracteristicas['aspecto_ratio'] = w / h
        caracteristicas['area_total'] = total_pixels
        
        # 2. CARACTER√çSTICAS DE INTENSIDADE
        caracteristicas['intensidade_media'] = np.mean(gray)
        caracteristicas['intensidade_std'] = np.std(gray)
        caracteristicas['intensidade_min'] = np.min(gray)
        caracteristicas['intensidade_max'] = np.max(gray)
        caracteristicas['range_dinamico'] = caracteristicas['intensidade_max'] - caracteristicas['intensidade_min']
        
        # 3. AN√ÅLISE DE HISTOGRAMA
        hist = cv2.calcHist([gray], [0], None, [256], [0, 256])
        hist_norm = hist.flatten() / total_pixels
        
        # Entropia (complexidade da informa√ß√£o)
        entropia = -np.sum(hist_norm * np.log2(hist_norm + 1e-10))
        caracteristicas['entropia'] = entropia
        
        # Picos no histograma
        picos = self._encontrar_picos_histograma(hist_norm)
        caracteristicas['num_picos_histograma'] = len(picos)
        caracteristicas['pico_principal'] = picos[0][0] if picos else 128
        
        # 4. AN√ÅLISE DE CONTRASTE E BORDAS
        # Vari√¢ncia do Laplaciano (nitidez)
        laplacian = cv2.Laplacian(gray, cv2.CV_64F)
        caracteristicas['variancia_laplaciana'] = laplacian.var()
        
        # Detec√ß√£o de bordas Canny
        edges = cv2.Canny(gray, 50, 150)
        caracteristicas['densidade_bordas'] = np.sum(edges > 0) / total_pixels
        caracteristicas['density_bordas'] = caracteristicas['densidade_bordas']  # Alias para compatibilidade
        
        # 5. AN√ÅLISE DE COMPONENTES
        # Threshold OTSU para an√°lise bin√°ria
        _, binary = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)
        
        # Componentes conectados
        num_labels, labels, stats, centroids = cv2.connectedComponentsWithStats(binary, connectivity=8)
        
        # Filtrar componentes por tamanho
        areas_validas = []
        for i in range(1, num_labels):
            area = stats[i, cv2.CC_STAT_AREA]
            if area > total_pixels * 0.001:  # Pelo menos 0.1% da imagem
                areas_validas.append(area)
        
        caracteristicas['num_componentes'] = len(areas_validas)
        caracteristicas['area_media_componentes'] = np.mean(areas_validas) if areas_validas else 0
        caracteristicas['densidade_texto'] = sum(areas_validas) / total_pixels if areas_validas else 0
        
        # 6. AN√ÅLISE DE PIXELS ESPEC√çFICOS - OTIMIZADA PARA DETEC√á√ÉO DE TEXTO
        # REGRA: Texto verdadeiro est√° em valor 0 (preto puro)
        pixels_preto = np.sum(gray == 0)
        caracteristicas['percentual_preto_puro'] = pixels_preto / total_pixels * 100
        
        # Pixels muito escuros (‚â§20) - poss√≠vel texto com anti-aliasing
        pixels_muito_escuros = np.sum(gray <= 20)
        caracteristicas['percentual_muito_escuros'] = pixels_muito_escuros / total_pixels * 100
        
        # Pixels escuros (‚â§85) - incluindo sombras de texto
        pixels_escuros = np.sum(gray <= 85)
        caracteristicas['percentual_escuros'] = pixels_escuros / total_pixels * 100
        
        # Pixels claros (>200) - prov√°vel fundo
        pixels_claros = np.sum(gray > 200)
        caracteristicas['percentual_claros'] = pixels_claros / total_pixels * 100
        
        # AN√ÅLISE DE CONCENTRA√á√ÉO DE VALORES BAIXOS (indica qualidade do texto)
        # Concentra√ß√£o em valores 0-10 (texto muito n√≠tido)
        pixels_nitidos = np.sum(gray <= 10)
        caracteristicas['concentracao_texto_nitido'] = pixels_nitidos / total_pixels * 100
        
        # Concentra√ß√£o em valores 11-50 (texto com bordas suaves)
        pixels_bordas_suaves = np.sum((gray > 10) & (gray <= 50))
        caracteristicas['concentracao_bordas_suaves'] = pixels_bordas_suaves / total_pixels * 100
        
        # 7. AN√ÅLISE DE TEXTURA
        # Uniformidade (Range de valores √∫nicos)
        valores_unicos = len(np.unique(gray))
        caracteristicas['diversidade_valores'] = valores_unicos
        caracteristicas['uniformidade'] = 1.0 - (valores_unicos / 256.0)
        
        # 8. AN√ÅLISE DE GRADIENTES
        grad_x = cv2.Sobel(gray, cv2.CV_64F, 1, 0, ksize=3)
        grad_y = cv2.Sobel(gray, cv2.CV_64F, 0, 1, ksize=3)
        magnitude = np.sqrt(grad_x**2 + grad_y**2)
        caracteristicas['gradiente_medio'] = np.mean(magnitude)
        caracteristicas['gradiente_std'] = np.std(magnitude)
        
        return caracteristicas
    
    def _encontrar_picos_histograma(self, hist_norm: np.ndarray) -> List[Tuple[int, float]]:
        """Encontra picos significativos no histograma"""
        picos = []
        
        for i in range(1, 255):
            if (hist_norm[i] > hist_norm[i-1] and 
                hist_norm[i] > hist_norm[i+1] and 
                hist_norm[i] > np.max(hist_norm) * 0.1):
                picos.append((i, hist_norm[i]))
        
        # Ordenar por intensidade (frequ√™ncia)
        picos.sort(key=lambda x: x[1], reverse=True)
        return picos
    
    def _classificar_tipo(self, carac: Dict[str, float]) -> TipoCaptcha:
        """Classifica o tipo de CAPTCHA baseado nas caracter√≠sticas"""
        
        # SIMPLES LIMPO: Poucos valores √∫nicos, alto contraste, poucos componentes
        if (carac['diversidade_valores'] < 50 and 
            carac['range_dinamico'] > 150 and 
            carac['num_componentes'] <= 8 and
            carac['entropia'] < 4.0):
            return TipoCaptcha.SIMPLES_LIMPO
        
        # PADR√ÉO SOMBRAS: Valores escuros moderados, entropia m√©dia
        if (carac['percentual_escuros'] > 5 and carac['percentual_escuros'] < 25 and
            carac['entropia'] >= 4.0 and carac['entropia'] < 6.5 and
            carac['num_componentes'] >= 3 and carac['num_componentes'] <= 10):
            return TipoCaptcha.PADRAO_SOMBRAS
        
        # DISTOR√á√ÉO GEOM√âTRICA: Alto gradiente, muitas bordas
        if (carac['variancia_laplaciana'] > 800 and
            carac['densidade_bordas'] > 0.15 and
            carac['gradiente_std'] > 50):
            return TipoCaptcha.DISTORCAO_GEOMETRICA
        
        # RU√çDO PESADO: Alta entropia, muitos valores √∫nicos
        if (carac['entropia'] > 6.5 and
            carac['diversidade_valores'] > 200 and
            carac['variancia_laplaciana'] > 400):
            return TipoCaptcha.RUIDO_PESADO
        
        # BAIXA RESOLU√á√ÉO: √Årea pequena ou baixa nitidez
        if (carac['area_total'] < 5000 or
            carac['variancia_laplaciana'] < 100):
            return TipoCaptcha.BAIXA_RESOLUCAO
        
        # Casos que n√£o se encaixam nos padr√µes
        return TipoCaptcha.CASO_ESPECIAL
    
    def _calcular_complexidade(self, carac: Dict[str, float]) -> float:
        """Calcula score de complexidade (0-100)"""
        
        # Normalizar caracter√≠sticas para 0-1
        entropia_norm = min(carac['entropia'] / 8.0, 1.0)
        laplacian_norm = min(carac['variancia_laplaciana'] / 2000.0, 1.0)
        componentes_norm = min(carac['num_componentes'] / 15.0, 1.0)
        diversidade_norm = carac['diversidade_valores'] / 256.0
        
        # Score ponderado
        complexidade = (
            entropia_norm * 0.30 +           # 30% - Complexidade da informa√ß√£o
            laplacian_norm * 0.25 +          # 25% - Nitidez/contraste
            componentes_norm * 0.20 +        # 20% - N√∫mero de elementos
            diversidade_norm * 0.25          # 25% - Diversidade de cores
        ) * 100
        
        return min(complexidade, 100.0)
    
    def _selecionar_estrategia(self, tipo: TipoCaptcha, complexidade: float, 
                              carac: Dict[str, float]) -> Tuple[EstrategiaProcessamento, List[EstrategiaProcessamento]]:
        """
        Seleciona estrat√©gia OTIMIZADA para texto preto (valor 0)
        PRIORIDADE: Detectar concentra√ß√£o de pixels pretos e usar estrat√©gia espec√≠fica
        """
        
        # REGRA PRIORIT√ÅRIA: Se h√° concentra√ß√£o significativa de texto preto, usar estrat√©gia espec√≠fica
        percentual_preto_puro = carac.get('percentual_preto_puro', 0)
        concentracao_nitido = carac.get('concentracao_texto_nitido', 0)
        
        # ESTRAT√âGIA ESPEC√çFICA PARA TEXTO PRETO N√çTIDO
        if percentual_preto_puro > 5 or concentracao_nitido > 8:
            logger.info(f"üñ§ TEXTO PRETO DETECTADO - Usando estrat√©gia de binariza√ß√£o espec√≠fica")
            return (
                EstrategiaProcessamento.BINARIZACAO_TEXTO_PRETO,
                [EstrategiaProcessamento.THRESHOLD_SIMPLES, EstrategiaProcessamento.MORFOLOGIA_AVANCADA]
            )
        
        # Estrat√©gias tradicionais por tipo (fallback)
        estrategias_por_tipo = {
            TipoCaptcha.SIMPLES_LIMPO: (
                EstrategiaProcessamento.THRESHOLD_SIMPLES,
                [EstrategiaProcessamento.BINARIZACAO_TEXTO_PRETO, EstrategiaProcessamento.THRESHOLD_ADAPTATIVO]
            ),
            TipoCaptcha.PADRAO_SOMBRAS: (
                EstrategiaProcessamento.BINARIZACAO_TEXTO_PRETO,  # Priorizar para sombras
                [EstrategiaProcessamento.THRESHOLD_ADAPTATIVO, EstrategiaProcessamento.MORFOLOGIA_AVANCADA]
            ),
            TipoCaptcha.DISTORCAO_GEOMETRICA: (
                EstrategiaProcessamento.MORFOLOGIA_AVANCADA,
                [EstrategiaProcessamento.BINARIZACAO_TEXTO_PRETO, EstrategiaProcessamento.SEGMENTACAO_WATERSHED]
            ),
            TipoCaptcha.RUIDO_PESADO: (
                EstrategiaProcessamento.DENOISE_AGRESSIVO,
                [EstrategiaProcessamento.BINARIZACAO_TEXTO_PRETO, EstrategiaProcessamento.MORFOLOGIA_AVANCADA]
            ),
            TipoCaptcha.BAIXA_RESOLUCAO: (
                EstrategiaProcessamento.SUPER_RESOLUTION,
                [EstrategiaProcessamento.BINARIZACAO_TEXTO_PRETO, EstrategiaProcessamento.THRESHOLD_ADAPTATIVO]
            ),
            TipoCaptcha.CASO_ESPECIAL: (
                EstrategiaProcessamento.PIPELINE_COMPLETO,
                [EstrategiaProcessamento.BINARIZACAO_TEXTO_PRETO, EstrategiaProcessamento.MORFOLOGIA_AVANCADA]
            )
        }
        
        principal, alternativas = estrategias_por_tipo[tipo]
        
        # Ajuste baseado na complexidade
        if complexidade > 80:
            # Casos muito complexos sempre usam pipeline completo
            if principal != EstrategiaProcessamento.PIPELINE_COMPLETO:
                alternativas.insert(0, principal)
                principal = EstrategiaProcessamento.PIPELINE_COMPLETO
        
        return principal, alternativas
    
    def _otimizar_parametros(self, tipo: TipoCaptcha, estrategia: EstrategiaProcessamento, 
                           carac: Dict[str, float]) -> Dict[str, any]:
        """Otimiza par√¢metros espec√≠ficos para a estrat√©gia escolhida"""
        
        parametros = {}
        
        # NOVA ESTRAT√âGIA: Binariza√ß√£o espec√≠fica para texto preto
        if estrategia == EstrategiaProcessamento.BINARIZACAO_TEXTO_PRETO:
            # Par√¢metros otimizados para texto em valor 0 (preto puro)
            percentual_preto = carac.get('percentual_preto_puro', 0)
            concentracao_nitido = carac.get('concentracao_texto_nitido', 0)
            
            if percentual_preto > 8:
                # Texto muito n√≠tido - threshold muito baixo
                parametros.update({
                    'threshold_max': 5,      # Aceitar apenas pixels 0-5
                    'invert_binary': False,  # Manter preto como preto
                    'apply_opening': True,   # Remover ru√≠do pequeno
                    'opening_kernel': (2, 2),
                    'apply_closing': True,   # Conectar caracteres quebrados
                    'closing_kernel': (1, 1)
                })
            elif concentracao_nitido > 5:
                # Texto n√≠tido com algum anti-aliasing
                parametros.update({
                    'threshold_max': 15,     # Incluir bordas suaves
                    'invert_binary': False,
                    'apply_opening': True,
                    'opening_kernel': (1, 1),
                    'apply_closing': True,
                    'closing_kernel': (2, 2)
                })
            else:
                # Texto com bordas suaves ou sombras
                parametros.update({
                    'threshold_max': 35,     # Incluir tons escuros
                    'invert_binary': False,
                    'apply_opening': False,  # N√£o remover - pode ser texto
                    'apply_closing': True,
                    'closing_kernel': (3, 3)
                })
        
        # Par√¢metros base por estrat√©gia (existentes)
        elif estrategia == EstrategiaProcessamento.THRESHOLD_SIMPLES:
            parametros.update({
                'blur_kernel': (3, 3) if carac['variancia_laplaciana'] > 200 else (1, 1),
                'morph_kernel_size': 2 if carac['num_componentes'] > 6 else 1,
                'apply_closing': carac['num_componentes'] > 5
            })
            
        elif estrategia == EstrategiaProcessamento.THRESHOLD_ADAPTATIVO:
            parametros.update({
                'block_size': 15 if carac['area_total'] > 10000 else 11,
                'C_constant': 3 if carac['entropia'] > 5 else 2,
                'method': 'gaussian' if carac['gradiente_std'] > 30 else 'mean'
            })
            
        elif estrategia == EstrategiaProcessamento.MORFOLOGIA_AVANCADA:
            parametros.update({
                'opening_kernel': (3, 3) if carac['density_bordas'] > 0.1 else (2, 2),
                'closing_kernel': (4, 4) if carac['num_componentes'] > 8 else (3, 3),
                'iterations': 2 if carac['variancia_laplaciana'] > 500 else 1
            })
            
        elif estrategia == EstrategiaProcessamento.DENOISE_AGRESSIVO:
            parametros.update({
                'bilateral_d': 9 if carac['entropia'] > 6 else 5,
                'bilateral_sigma_color': 75 if carac['diversidade_valores'] > 150 else 50,
                'bilateral_sigma_space': 75,
                'median_kernel': 5 if carac['variancia_laplaciana'] < 200 else 3
            })
        
        # Adicionar par√¢metros comuns otimizados
        parametros.update({
            'preprocessing_intensity': 'high' if carac['entropia'] > 6 else 'medium',
            'postprocessing_enabled': carac['num_componentes'] > 3,
            'quality_check_enabled': True
        })
        
        return parametros
    
    def _calcular_threshold_otimo(self, carac: Dict[str, float], tipo: TipoCaptcha) -> int:
        """
        HEUR√çSTICA OTIMIZADA: Caracteres verdadeiros est√£o em valor 0 (preto puro)
        Todo resto (valor > 0) √© ru√≠do/fundo que deve ser eliminado ou convertido para 255 (branco)
        """
        
        # REGRA FUNDAMENTAL: Texto = valor 0, Fundo/Ru√≠do = valor > 0
        percentual_preto_puro = carac['percentual_preto_puro']
        percentual_escuros = carac['percentual_escuros']
        
        logger.info(f"üìä An√°lise de distribui√ß√£o: {percentual_preto_puro:.1f}% pixels valor 0, {percentual_escuros:.1f}% pixels escuros")
        
        # ESTRAT√âGIA 1: CAPTCHA com alto percentual de preto puro (texto n√≠tido)
        if percentual_preto_puro > 8:
            logger.info(f"üñ§ TEXTO N√çTIDO DETECTADO - Threshold ‚â§5 (manter apenas valor 0)")
            return 5  # Muito restritivo - apenas pixels 0-5 s√£o considerados texto
        
        # ESTRAT√âGIA 2: CAPTCHA com pouco preto puro mas muitos escuros (texto borrado/anti-aliasing)
        elif percentual_preto_puro < 2 and percentual_escuros > 15:
            # Analisar concentra√ß√£o em valores muito baixos
            if carac.get('percentual_muito_escuros', 0) > 10:  # pixels ‚â§ 20
                logger.info(f"üåë TEXTO COM ANTI-ALIASING - Threshold ‚â§20 (capturar bordas suaves)")
                return 20  # Capturar texto com bordas suavizadas
            else:
                logger.info(f"‚ö´ TEXTO EM SOMBRAS - Threshold ‚â§35 (incluir tons escuros)")
                return 35  # Incluir tons escuros que podem ser texto
        
        # ESTRAT√âGIA 3: CAPTCHA com pouco contraste (fundo claro, texto escuro)
        elif percentual_preto_puro < 2 and carac['percentual_claros'] > 60:
            logger.info(f"ü§ç ALTO CONTRASTE FUNDO CLARO - Threshold ‚â§50 (separar texto de fundo)")
            return 50  # Fundo muito claro, separar melhor o texto
        
        # ESTRAT√âGIA 4: CAPTCHA balanceado (quantidade moderada de preto)
        elif 2 <= percentual_preto_puro <= 8:
            # Verificar se h√° picos distintos no histograma
            num_picos = carac.get('num_picos_histograma', 0)
            if num_picos >= 2:
                pico_principal = carac.get('pico_principal', 128)
                if pico_principal > 200:  # Fundo muito claro
                    logger.info(f"üå´Ô∏è BIMODAL COM FUNDO CLARO - Threshold ‚â§40")
                    return 40
                else:
                    logger.info(f"üìä BIMODAL BALANCEADO - Threshold ‚â§60")
                    return 60
            else:
                logger.info(f"‚ö´ DISTRIBUI√á√ÉO UNIFORME - Threshold ‚â§70")
                return 70
        
        # ESTRAT√âGIA 5: CAPTCHA problem√°tico (fallback conservador)
        else:
            logger.info(f"‚ùì PADR√ÉO N√ÉO IDENTIFICADO - Usando threshold conservador ‚â§85")
            return 85  # Valor comprovadamente eficaz (78.6% sucesso)
        
        # An√°lise adicional baseada no tipo identificado
        if tipo == TipoCaptcha.RUIDO_PESADO:
            # Para ru√≠do pesado, usar threshold espec√≠fico otimizado
            threshold_base = 40
            logger.info(f"üóø CAPTCHA com ru√≠do pesado - threshold otimizado ‚â§{threshold_base}")
            return threshold_base
            
        elif tipo == TipoCaptcha.BAIXA_RESOLUCAO:
            # Para baixa resolu√ß√£o, ser mais permissivo para capturar detalhes fragmentados
            threshold_base = max(85, 85)
            logger.info(f"üîç CAPTCHA baixa resolu√ß√£o - threshold permissivo ‚â§{threshold_base}")
            return threshold_base

    def _calcular_confianca_analise(self, tipo: TipoCaptcha, complexidade: float, 
                              carac: Dict[str, float]) -> float:
        """Calcula a confian√ßa da an√°lise realizada"""
        
        confianca_base = 0.8  # 80% base
        
        # Boost para tipos bem definidos
        confianca_por_tipo = {
            TipoCaptcha.SIMPLES_LIMPO: 0.95,
            TipoCaptcha.PADRAO_SOMBRAS: 0.90,
            TipoCaptcha.DISTORCAO_GEOMETRICA: 0.85,
            TipoCaptcha.RUIDO_PESADO: 0.80,
            TipoCaptcha.BAIXA_RESOLUCAO: 0.85,
            TipoCaptcha.CASO_ESPECIAL: 0.70
        }
        
        confianca = confianca_por_tipo[tipo]
        
        # Ajuste baseado na complexidade
        if complexidade < 30:
            confianca += 0.05  # Casos simples, mais confian√ßa
        elif complexidade > 80:
            confianca -= 0.10  # Casos complexos, menos confian√ßa
        
        # Ajuste baseado na clareza dos dados
        if carac['num_picos_histograma'] >= 2 and carac['range_dinamico'] > 100:
            confianca += 0.05  # Dados claros, mais confian√ßa
        
        return min(confianca, 0.98)  # M√°ximo 98% de confian√ßa na an√°lise
    
    def _atualizar_estatisticas(self, analise: AnaliseCompleta):
        """Atualiza estat√≠sticas internas para aprendizado"""
        self.estatisticas['total_analisados'] += 1
        
        # Contabilizar tipos
        tipo_str = analise.tipo_captcha.value
        if tipo_str not in self.estatisticas['tipos_encontrados']:
            self.estatisticas['tipos_encontrados'][tipo_str] = 0
        self.estatisticas['tipos_encontrados'][tipo_str] += 1
        
        # Adicionar ao hist√≥rico (manter apenas √∫ltimos 100)
        self.historico_analises.append(analise)
        if len(self.historico_analises) > 100:
            self.historico_analises.pop(0)
    
    def carregar_conhecimento_previo(self):
        """Carrega conhecimento de an√°lises anteriores"""
        try:
            stats_path = Path("heuristica_estatisticas.json")
            if stats_path.exists():
                with open(stats_path, 'r') as f:
                    self.estatisticas.update(json.load(f))
                logger.info(f"üìö Conhecimento pr√©vio carregado: {self.estatisticas['total_analisados']} an√°lises")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao carregar conhecimento pr√©vio: {e}")
    
    def salvar_conhecimento(self):
        """Salva conhecimento adquirido"""
        try:
            stats_path = Path("heuristica_estatisticas.json")
            with open(stats_path, 'w') as f:
                # Converter tipos numpy antes de salvar
                estatisticas_convertidas = convert_numpy_types(self.estatisticas)
                json.dump(estatisticas_convertidas, f, indent=2)
            logger.info(f"üíæ Conhecimento salvo: {self.estatisticas['total_analisados']} an√°lises")
        except Exception as e:
            logger.error(f"‚ùå Erro ao salvar conhecimento: {e}")
    
    def obter_relatorio_analise(self, analise: AnaliseCompleta) -> str:
        """Gera relat√≥rio detalhado da an√°lise"""
        relatorio = f"""
üß† RELAT√ìRIO DE AN√ÅLISE HEUR√çSTICA
==================================
Timestamp: {analise.timestamp}
Tempo de an√°lise: {analise.tempo_analise:.3f}s

üìä CLASSIFICA√á√ÉO:
   Tipo: {analise.tipo_captcha.value}
   Complexidade: {analise.score_complexidade:.1f}/100
   Confian√ßa da an√°lise: {analise.confianca_analise:.1%}

üéØ ESTRAT√âGIA RECOMENDADA:
   Principal: {analise.estrategia_principal.value}
   Alternativas: {', '.join([e.value for e in analise.estrategias_alternativas])}
   Threshold √≥timo: ‚â§{analise.threshold_recomendado}

üìà CARACTER√çSTICAS PRINCIPAIS:
   Dimens√µes: {analise.caracteristicas['largura']}x{analise.caracteristicas['altura']}
   Entropia: {analise.caracteristicas['entropia']:.2f}
   Componentes: {analise.caracteristicas['num_componentes']}
   Preto puro: {analise.caracteristicas['percentual_preto_puro']:.1f}%
   Escuros: {analise.caracteristicas['percentual_escuros']:.1f}%

‚öôÔ∏è PAR√ÇMETROS OTIMIZADOS:
"""
        for param, valor in analise.parametros_otimizados.items():
            relatorio += f"   {param}: {valor}\n"
        
        return relatorio

if __name__ == "__main__":
    # Teste do analisador
    logging.basicConfig(level=logging.INFO, format='üß† [%(asctime)s] %(levelname)s: %(message)s', datefmt='%H:%M:%S')
    
    print("üß† Testando Analisador Inteligente...")
    analisador = AnalisadorInteligente()
    
    # Criar imagem de teste
    img_teste = np.random.randint(0, 255, (40, 120, 3), dtype=np.uint8)
    
    # Executar an√°lise
    resultado = analisador.analisar_captcha(img_teste)
    
    # Mostrar relat√≥rio
    print(analisador.obter_relatorio_analise(resultado))
